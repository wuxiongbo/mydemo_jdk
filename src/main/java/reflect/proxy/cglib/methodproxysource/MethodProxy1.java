package reflect.proxy.cglib.methodproxysource;

/*
 * Copyright 2003,2004 The Apache Software Foundation
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

import net.sf.cglib.core.AbstractClassGenerator;
import net.sf.cglib.core.CodeGenerationException;
import net.sf.cglib.core.GeneratorStrategy;
import net.sf.cglib.core.NamingPolicy;
import net.sf.cglib.core.Signature;
import net.sf.cglib.proxy.Enhancer;
import net.sf.cglib.proxy.MethodInterceptor;
import net.sf.cglib.reflect.FastClass;
import reflect.proxy.cglib.methodproxysource.fastclass.C0000x27e1ddf4;
import reflect.proxy.cglib.methodproxysource.fastclass.ConcreteClassNoInterface$$FastClassByCGLIB$$f6027e63;

/**
 * Classes generated by {@link Enhancer} pass this object to the
 * registered {@link MethodInterceptor} objects when an intercepted method is invoked. It can
 * be used to either invoke the original method, or call the same method on a different
 * object of the same type.
 * @version $Id: MethodProxy.java,v 1.16 2009/01/11 20:09:48 herbyderby Exp $
 */
public class MethodProxy1 {
    /**
     * 被代理方法的方法签名（对应方法的逻辑，为代理增强后的逻辑）
     */
    private Signature sig1;
    /**
     * cglib生成的方法 的方法签名（对应方法的逻辑，直接委托给父类实现）
     */
    private Signature sig2;

    /**
     * 构建 详情：
     *   主要记录了 被代理类、代理类 的 class对象
     */
    private CreateInfo createInfo;

    private final Object initLock = new Object();

    /**
     * 1）保存了 全部索引信息
     * 2）保存了 当前正在调用的方法的索引
     */
    private volatile FastClassInfo fastClassInfo;

    /**
     * MethodProxy  构造器
     *
     * c1:     被代理对象Class
     * c2:     代理对象Class
     * desc：  入参类型
     * name1:  原方法名
     * name2:  cglib生成的方法
     *
     * For internal use by {@link Enhancer} only; see the {@link net.sf.cglib.reflect.FastMethod} class
     * for similar functionality.
     */
    public static MethodProxy1 create(Class c1, Class proxy, String desc, String name1, String name2) {
        MethodProxy1 methodProxy = new MethodProxy1();

        // 被代理方法的方法签名。        如：getConcreteMethodA
        methodProxy.sig1 = new Signature(name1, desc);
        // cglib生成的方法 的方法签名。  如：CGLIB$getConcreteMethodA$1
        methodProxy.sig2 = new Signature(name2, desc);

        // 记录 被代理类、代理类
        methodProxy.createInfo = new MethodProxy1.CreateInfo(c1, proxy);
        return methodProxy;
    }

    /**
     * MethodProxy 的 invoke/invokeSuper ，都调用了init()
     * 代理对象   的 FastClass {@link C0000x27e1ddf4}
     * 被代理对象  的 FastClass {@link ConcreteClassNoInterface$$FastClassByCGLIB$$f6027e63}
     */
    private void init() {
        /*
         * Using a volatile invariant allows us to initialize the FastClass and
         * method index pairs atomically.
         *
         * Double-checked locking is safe with volatile in Java 5.  Before 1.5 this
         * code could allow fastClassInfo to be instantiated more than once, which
         * appears to be benign.
         */
        if (fastClassInfo == null) {
            synchronized (initLock) {
                if (fastClassInfo == null) {
                    // 1）创建索引： 获取 FastClass 索引对象

                    CreateInfo createInfo0 = createInfo;
                    // FastClass 并不是跟代理类一块生成的，而是在第一次执行 MethodProxy invoke/invokeSuper时 生成的，并放在了缓存中。
                    FastClassInfo fci = new MethodProxy1.FastClassInfo();

                    // 如果缓存中有，就取出；没有，就生成新的 FastClass。
                    // FastClass 中还包括了 代理类、被代理类 的构造方法
                    fci.f1 = helper(createInfo0, createInfo0.c1);  // 被代理对象 对应的 FastClass  如：ConcreteClassNoInterface$$FastClassByCGLIB$$f6027e63
                    fci.f2 = helper(createInfo0, createInfo0.c2);  // 代理对象 对应的 FastClass    如：C0000x27e1ddf4

                    // 2）查找索引：  获取方法的index
                    fci.i1 = fci.f1.getIndex(sig1);  // 被代理方法的 索引
                    fci.i2 = fci.f2.getIndex(sig2);  // cglib生成的方法 的索引

                    fastClassInfo = fci;
                    createInfo = null;
                }
            }
        }
    }

    private static class FastClassInfo {
        FastClass f1;  //被代理类FastClass   例如：ConcreteClassNoInterface$$FastClassByCGLIB$$f6027e63
        FastClass f2;  //代理类FastClass     例如：C0000x27e1ddf4
        int i1;        // 被代理类的方法名 对应方法的签名 索引(index)
        int i2;        // cglib生成的方法名 对应方法的签名   索引(index)
    }

    private static class CreateInfo {
        Class c1;  // 被代理对象Class
        Class c2;  // 代理对象Class
        NamingPolicy namingPolicy;
        GeneratorStrategy strategy;
        boolean attemptLoad;

        public CreateInfo(Class c1, Class c2) {
            this.c1 = c1;
            this.c2 = c2;
            AbstractClassGenerator fromEnhancer = AbstractClassGenerator.getCurrent();
            if (fromEnhancer != null) {
                namingPolicy = fromEnhancer.getNamingPolicy();
                strategy = fromEnhancer.getStrategy();
                attemptLoad = fromEnhancer.getAttemptLoad();
            }
        }
    }

    /**
     * 建造者设计模式：
     * 获取 或 构造 FastClass
     *
     * 关键方法 {@link AbstractClassGenerator#create(Object)}
     *
     * @param ci
     * @param type
     * @return
     */
    private static FastClass helper(MethodProxy1.CreateInfo ci, Class type) {
        FastClass.Generator g = new FastClass.Generator();
        g.setType(type);
        g.setClassLoader(ci.c2.getClassLoader());
        g.setNamingPolicy(ci.namingPolicy);
        g.setStrategy(ci.strategy);
        g.setAttemptLoad(ci.attemptLoad);
        return g.create();
    }

    private MethodProxy1() {
    }

    /**
     * Return the signature of the proxied method.
     */
    public Signature getSignature() {
        return sig1;
    }

    /**
     * Return the name of the synthetic method created by CGLIB which is
     * used by {@link #invokeSuper} to invoke the superclass
     * (non-intercepted) method implementation. The parameter types are
     * the same as the proxied method.
     */
    public String getSuperName() {
        return sig2.getName();
    }

    /**
     * Return the {@link net.sf.cglib.reflect.FastClass} method index
     * for the method used by {@link #invokeSuper}. This index uniquely
     * identifies the method within the generated proxy, and therefore
     * can be useful to reference external metadata.
     * @see #getSuperName
     */
    public int getSuperIndex() {
        init();
        return fastClassInfo.i2;
    }

    // For testing
    FastClass getFastClass() {
        init();
        return fastClassInfo.f1;
    }

    // For testing
    FastClass getSuperFastClass() {
        init();
        return fastClassInfo.f2;
    }

    static final String EMPTY_ARGS_NAME = "CGLIB$emptyArgs";
    static final String FIND_PROXY_NAME = "CGLIB$findMethodProxy";
    static final Class[] FIND_PROXY_TYPES = { Signature.class };


    /**
     * Return the <code>MethodProxy</code> used when intercepting the method
     * matching the given signature.
     * @param type the class generated by Enhancer
     * @param sig the signature to match
     * @return the MethodProxy instance, or null if no applicable matching method is found
     * @throws IllegalArgumentException if the Class was not created by Enhancer or does not use a MethodInterceptor
     */
    public static MethodProxy1 find(Class type, Signature sig) {
        try {
            Method m = type.getDeclaredMethod(FIND_PROXY_NAME,
                    FIND_PROXY_TYPES);
            return (MethodProxy1)m.invoke(null, new Object[]{ sig });
        } catch (NoSuchMethodException e) {
            throw new IllegalArgumentException("Class " + type + " does not use a MethodInterceptor");
        } catch (IllegalAccessException e) {
            throw new CodeGenerationException(e);
        } catch (InvocationTargetException e) {
            throw new CodeGenerationException(e);
        }
    }

    /**
     * Invoke the original method, on a different object of the same type.
     * @param obj the compatible object; recursion will result if you use the object passed as the first
     * argument to the MethodInterceptor (usually not what you want)
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invoke(Object obj, Object[] args) throws Throwable {
        try {

            // 初始化方法。 构造 或 获取 fastClassInfo;  方法索引在这里生成
            init();

            MethodProxy1.FastClassInfo fci = fastClassInfo;

            // 关键是这里的 FastClass 机制。 可以看到，invoke 不是反射的  invoke方法， 而是 FastClass 对象里面的 invoke方法。
            // fci.i1 方法索引
            // obj    *** 被代理对象 ***
            // args   方法参数
            return fci.f1.invoke(fci.i1, obj, args);

        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        } catch (IllegalArgumentException e) {
            if (fastClassInfo.i1 < 0) {
                throw new IllegalArgumentException("Protected method: " + sig1);
            }
            throw e;
        }
    }

    /**
     * Invoke the original (super) method on the specified object.
     * @param obj the enhanced object, must be the object passed as the first
     * argument to the MethodInterceptor
     * @param args the arguments passed to the intercepted method; you may substitute a different
     * argument array as long as the types are compatible
     * @see MethodInterceptor#intercept
     * @throws Throwable the bare exceptions thrown by the called method are passed through
     * without wrapping in an <code>InvocationTargetException</code>
     */
    public Object invokeSuper(Object obj, Object[] args) throws Throwable {
        try {

            // 初始化方法。 构造 或 获取 fastClassInfo;  方法索引在这里生成
            init();

            FastClassInfo fci = fastClassInfo;

            // 关键是这里的 FastClass机制。  可以看到，invoke 不是反射的  invoke方法， 而是 FastClass 对象里面的 invoke方法。
            // fci.i2 方法索引
            // obj    *** 代理对象 ***
            // args   方法参数
            return fci.f2.invoke(fci.i2, obj, args);  // C0000x27e1ddf4

        } catch (InvocationTargetException e) {
            throw e.getTargetException();
        }
    }
}
